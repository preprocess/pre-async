<?php

$(macro) {
    await
} >> {
    yield
}

$(macro) {
    $(chain(
        buffer("async"),
        functionModifiers(),
        buffer("function"),
        ns() as function,
        buffer("("),
        functionArguments(),
        buffer(")"),
        functionReturn(),
        buffer(";")
    ))
} >> {$$(trim(
    $$(functionModifiers($(functionModifiers))) function $(function)($(functionArguments ... (, ) { $$(functionArgument($(functionArgument))) })): \Amp\Promise;
))}

$(macro :recursion) {
    $(chain(
        buffer("async"),
        functionModifiers(),
        buffer("function"),
        ns() as function,
        buffer("("),
        functionArguments(),
        buffer(")"),
        functionReturn(),
        buffer("{"),
        layer() as body,
        buffer("}"),
        _() as scope,
        _() as yields,
        _() as amp1,
        _() as amp2
    ))
} >> function($ast) {
    return \Pre\Async\compile($ast, $isClosure = false);
} >> {$$(trim(
    $(scope ? {
        $$(functionModifiers($(functionModifiers))) function $(function)($(functionArguments ... (, ) { $$(functionArgument($(functionArgument))) })): \Amp\Promise
        {
            return $$(trim(
                $(amp1 ? { \Amp\resolve })
                $(amp2 ? { \Amp\call })
                (function () use ($(scope ... (, ) { &$(var) })) {
                    $(body) $(yields ? {yield;})
                });
            ))
        }
    })

    $(scope ! {
        $$(functionModifiers($(functionModifiers))) function $(function)($(functionArguments ... (, ) { $$(functionArgument($(functionArgument))) })): \Amp\Promise
        {
            return $$(trim(
                $(amp1 ? { \Amp\resolve })
                $(amp2 ? { \Amp\call })
                (function () {
                    $(body) $(yields ? {yield;})
                });
            ))
        }
    })
))}

$(macro :recursion) {
    $(chain(
        buffer("async"),
        optional(buffer("function")),
        buffer("("),
        functionArguments(),
        buffer(")"),
        functionReturn(),
        optional(buffer("~>")),
        buffer("{"),
        layer() as body,
        buffer("}"),
        _() as scope,
        _() as yields,
        _() as amp1,
        _() as amp2
    ))
} >> function($ast) {
    return \Pre\Async\compile($ast, $isClosure = true);
} >> {$$(trim(
    $(scope ? {
        [$(scope ... (, ) { $(var) = $(var) ?? null}), "fn" => function ($(functionArguments ... (, ) { $$(functionArgument($(functionArgument))) })) use ($(scope ... (, ) { &$(var) })): \Amp\Promise {
            return $$(trim(
                $(amp1 ? { \Amp\resolve })
                $(amp2 ? { \Amp\call })
                (function () use ($(scope ... (, ) { &$(var) })) {
                    $(body) $(yields ? {yield;})
                });
            ))
        }]["fn"]
    })

    $(scope ! {
        function ($(functionArguments ... (, ) { $$(functionArgument($(functionArgument))) })): \Amp\Promise {
            return $$(trim(
                $(amp1 ? { \Amp\resolve })
                $(amp2 ? { \Amp\call })
                (function () {
                    $(body) $(yields ? {yield;})
                });
            ))
        }
    })
))}
